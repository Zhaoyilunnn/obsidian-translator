/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => TranslatorPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// settings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// utils.ts
var import_obsidian = __toModule(require("obsidian"));
var path = require("path");
var noticeHandler = (msg) => new import_obsidian.Notice(msg);
function truncate(q) {
  const len = q.length;
  if (len <= 20)
    return q;
  return q.substring(0, 10) + len + q.substring(len - 10, len);
}
function handleTranslate(q, config, cb) {
  return __async(this, null, function* () {
    const salt = new Date().getTime();
    const curtime = Math.round(new Date().getTime() / 1e3);
    const str1 = config.appId + truncate(q) + salt + curtime + config.secretKey;
    const hashBuffer = yield crypto.subtle.digest("SHA-256", new TextEncoder().encode(str1));
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const sign = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
    const from = "auto";
    const params = { q, appKey: config.appId, salt, from, to: config.to, sign, curtime, signType: "v3" };
    const query = Object.keys(params).map((key) => `${key}=${params[key]}`).join("&");
    (0, import_obsidian.request)({
      method: "get",
      url: `https://openapi.youdao.com/api?${query}`
    }).then(function(response) {
      cb(JSON.parse(response || "{}"));
    }).catch(function(error) {
      noticeHandler(error.message || "No results!");
    });
  });
}
function handleAudio(url, cb) {
  (0, import_obsidian.requestUrl)({ method: "post", url }).then((res) => {
    cb(res);
  }).catch(function(error) {
    noticeHandler(error.message || "No results!");
  });
}
var LANGUAGES = {
  \u81EA\u52A8: "auto",
  \u4E2D\u6587: "zh-CHS",
  \u4E2D\u6587\u7E41\u4F53: "zh-CHT",
  \u82F1\u6587: "en",
  \u65E5\u6587: "ja",
  \u97E9\u6587: "ko",
  \u6CD5\u6587: "fr",
  \u897F\u73ED\u7259\u6587: "es",
  \u8461\u8404\u7259\u6587: "pt",
  \u610F\u5927\u5229\u6587: "it",
  \u4FC4\u6587: "ru",
  \u8D8A\u5357\u6587: "vi",
  \u5FB7\u6587: "de",
  \u963F\u62C9\u4F2F\u6587: "ar",
  \u5370\u5C3C\u6587: "id",
  \u5357\u975E\u8377\u5170\u8BED: "af",
  \u6CE2\u65AF\u5C3C\u4E9A\u8BED: "bs",
  \u4FDD\u52A0\u5229\u4E9A\u8BED: "bg",
  \u7CA4\u8BED: "yue",
  \u52A0\u6CF0\u9686\u8BED: "ca",
  \u514B\u7F57\u5730\u4E9A\u8BED: "hr",
  \u6377\u514B\u8BED: "cs",
  \u4E39\u9EA6\u8BED: "da",
  \u8377\u5170\u8BED: "nl",
  \u7231\u6C99\u5C3C\u4E9A\u8BED: "et",
  \u6590\u6D4E\u8BED: "fj",
  \u82AC\u5170\u8BED: "fi",
  \u5E0C\u814A\u8BED: "el",
  \u6D77\u5730\u514B\u91CC\u5965\u5C14\u8BED: "ht",
  \u5E0C\u4F2F\u6765\u8BED: "he",
  \u5370\u5730\u8BED: "hi",
  \u767D\u82D7\u8BED: "mww",
  \u5308\u7259\u5229\u8BED: "hu",
  \u65AF\u74E6\u5E0C\u91CC\u8BED: "sw",
  \u514B\u6797\u8D21\u8BED: "tlh",
  \u62C9\u8131\u7EF4\u4E9A\u8BED: "lv",
  \u7ACB\u9676\u5B9B\u8BED: "lt",
  \u9A6C\u6765\u8BED: "ms",
  \u9A6C\u8033\u4ED6\u8BED: "mt",
  \u632A\u5A01\u8BED: "no",
  \u6CE2\u65AF\u8BED: "fa",
  \u6CE2\u5170\u8BED: "pl",
  \u514B\u96F7\u5854\u7F57\u5965\u6258\u7C73\u8BED: "otq",
  \u7F57\u9A6C\u5C3C\u4E9A\u8BED: "ro",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED(\u897F\u91CC\u5C14\u6587)": "sr-Cyrl",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED(\u62C9\u4E01\u6587)": "sr-Latn",
  \u65AF\u6D1B\u4F10\u514B\u8BED: "sk",
  \u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED: "sl",
  \u745E\u5178\u8BED: "sv",
  \u5854\u5E0C\u63D0\u8BED: "ty",
  \u6CF0\u8BED: "th",
  \u6C64\u52A0\u8BED: "to",
  \u571F\u8033\u5176\u8BED: "tr",
  \u4E4C\u514B\u5170\u8BED: "uk",
  \u4E4C\u5C14\u90FD\u8BED: "ur",
  \u5A01\u5C14\u58EB\u8BED: "cy",
  \u5C24\u5361\u5766\u739B\u96C5\u8BED: "yua",
  \u963F\u5C14\u5DF4\u5C3C\u4E9A\u8BED: "sq",
  \u963F\u59C6\u54C8\u62C9\u8BED: "am",
  \u4E9A\u7F8E\u5C3C\u4E9A\u8BED: "hy",
  \u963F\u585E\u62DC\u7586\u8BED: "az",
  \u5B5F\u52A0\u62C9\u8BED: "bn",
  \u5DF4\u65AF\u514B\u8BED: "eu",
  \u767D\u4FC4\u7F57\u65AF\u8BED: "be",
  \u5BBF\u52A1\u8BED: "ceb",
  \u79D1\u897F\u5609\u8BED: "co",
  \u4E16\u754C\u8BED: "eo",
  \u83F2\u5F8B\u5BBE\u8BED: "tl",
  \u5F17\u91CC\u897F\u8BED: "fy",
  \u52A0\u5229\u897F\u4E9A\u8BED: "gl",
  \u683C\u9C81\u5409\u4E9A\u8BED: "ka",
  \u53E4\u5409\u62C9\u7279\u8BED: "gu",
  \u8C6A\u8428\u8BED: "ha",
  \u590F\u5A01\u5937\u8BED: "haw",
  \u51B0\u5C9B\u8BED: "is",
  \u4F0A\u535A\u8BED: "ig",
  \u7231\u5C14\u5170\u8BED: "ga",
  \u722A\u54C7\u8BED: "jw",
  \u5361\u7EB3\u8FBE\u8BED: "kn",
  \u54C8\u8428\u514B\u8BED: "kk",
  \u9AD8\u68C9\u8BED: "km",
  \u5E93\u5C14\u5FB7\u8BED: "ku",
  \u67EF\u5C14\u514B\u5B5C\u8BED: "ky",
  \u8001\u631D\u8BED: "lo",
  \u62C9\u4E01\u8BED: "la",
  \u5362\u68EE\u5821\u8BED: "lb",
  \u9A6C\u5176\u987F\u8BED: "mk",
  \u9A6C\u5C14\u52A0\u4EC0\u8BED: "mg",
  \u9A6C\u62C9\u96C5\u62C9\u59C6\u8BED: "ml",
  \u6BDB\u5229\u8BED: "mi",
  \u9A6C\u62C9\u5730\u8BED: "mr",
  \u8499\u53E4\u8BED: "mn",
  \u7F05\u7538\u8BED: "my",
  \u5C3C\u6CCA\u5C14\u8BED: "ne",
  \u9F50\u5207\u74E6\u8BED: "ny",
  \u666E\u4EC0\u56FE\u8BED: "ps",
  \u65C1\u906E\u666E\u8BED: "pa",
  \u8428\u6469\u4E9A\u8BED: "sm",
  \u82CF\u683C\u5170\u76D6\u5C14\u8BED: "gd",
  \u585E\u7D22\u6258\u8BED: "st",
  \u4FEE\u7EB3\u8BED: "sn",
  \u4FE1\u5FB7\u8BED: "sd",
  \u50E7\u4F3D\u7F57\u8BED: "si",
  \u7D22\u9A6C\u91CC\u8BED: "so",
  \u5DFD\u4ED6\u8BED: "su",
  \u5854\u5409\u514B\u8BED: "tg",
  \u6CF0\u7C73\u5C14\u8BED: "ta",
  \u6CF0\u5362\u56FA\u8BED: "te",
  \u4E4C\u5179\u522B\u514B\u8BED: "uz",
  \u5357\u975E\u79D1\u8428\u8BED: "xh",
  \u610F\u7B2C\u7EEA\u8BED: "yi",
  \u7EA6\u9C81\u5DF4\u8BED: "yo",
  \u5357\u975E\u7956\u9C81\u8BED: "zu",
  \u81EA\u52A8\u8BC6\u522B: "auto"
};
var options = Object.keys(LANGUAGES).reduce((obj, key) => __spreadProps(__spreadValues({}, obj), {
  [LANGUAGES[key]]: `${key}-${LANGUAGES[key]}`
}), {});

// settings.ts
var SETTINGS = [
  {
    name: "appId",
    desc: "Please set your app id.",
    type: "text"
  },
  {
    name: "secretKey",
    desc: "Please set your secret id.",
    type: "text"
  },
  {
    name: "to",
    desc: "Choose which language you wanna translate into.",
    type: "select"
  },
  {
    name: "audio",
    desc: "Whether to enable the audio function?",
    type: "toggle"
  }
];
var TranslatorSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Translator Settings" });
    const descEl = containerEl.createEl("p", {
      text: "Before using this plugin, you need browse to ",
      cls: "desc"
    });
    descEl.appendChild(createEl("a", {
      text: "https://ai.youdao.com/#/",
      href: "https://ai.youdao.com/#/"
    }));
    descEl.appendText(" to register first!");
    SETTINGS.forEach((set) => {
      const { name, desc, type } = set;
      const el = new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc);
      switch (type) {
        case "text":
          el.addText((text) => text.setPlaceholder(name).setValue(this.plugin.settings[name]).onChange((value) => __async(this, null, function* () {
            this.plugin.settings[name] = value;
            yield this.plugin.saveSettings();
          })));
          break;
        case "select":
          el.addDropdown((dp) => dp.addOptions(options).setValue(this.plugin.settings.to).onChange((value) => __async(this, null, function* () {
            this.plugin.settings.to = value;
            yield this.plugin.saveSettings();
          })));
          break;
        case "toggle":
          el.addToggle((tg) => {
            tg.setValue(this.plugin.settings.audio).onChange((val) => __async(this, null, function* () {
              this.plugin.settings.audio = val;
              yield this.plugin.saveSettings();
            }));
          });
          break;
        default:
          break;
      }
    });
  }
};

// modals.ts
var import_obsidian3 = __toModule(require("obsidian"));
var TranslatorModal = class extends import_obsidian3.Modal {
  constructor(app, text, settings) {
    super(app);
    this.text = text;
    this.loading = createEl("div", {
      cls: "translator_container-overlay",
      text: "Translating..."
    });
    this.settings = settings;
  }
  translate(containerEl) {
    containerEl.empty();
    containerEl.appendChild(this.loading);
    const { to, appId, secretKey, audio } = this.settings;
    handleTranslate(this.text, { to: this.customTo || to, appId, secretKey }, (data) => {
      containerEl.removeChild(this.loading);
      const { query, translation, web, basic, l, webdict, tSpeakUrl, speakUrl } = data;
      const [FROM, TO] = l.split("2");
      containerEl.appendChild(createEl("a", {
        cls: "translator_container-title",
        text: query,
        href: webdict ? webdict.url : ""
      }));
      const audioesContainer = createEl("div", { cls: "translator_container-audioes" });
      if (audio) {
        const speakUrls = { origin: speakUrl, result: tSpeakUrl };
        Object.keys(speakUrls).forEach((key) => {
          new import_obsidian3.Setting(audioesContainer).setName(`${key}:`).addButton((btn) => {
            btn.setIcon("audio-file").onClick(() => {
              document.getElementById(key).play();
            });
          });
          handleAudio(speakUrls[key], (res) => {
            audioesContainer.appendChild(createEl("div", {
              cls: "translator_container-player"
            }));
            audioesContainer.appendChild(createEl("audio", {
              attr: {
                src: URL.createObjectURL(new Blob([res.arrayBuffer], { type: "audio/mp3" })),
                id: key
              }
            }));
          });
        });
        containerEl.appendChild(audioesContainer);
      }
      if (basic) {
        let symbolText = basic.phonetic ? `[${basic.phonetic}]` : "";
        if (FROM === "en" && TO === "zh-CHS") {
          symbolText = `${basic["us-phonetic"] ? `us: [${basic["us-phonetic"]}]` : ""}
${basic["uk-phonetic"] ? `uk: [${basic["uk-phonetic"]}]` : ""}`;
        }
        containerEl.appendChild(createEl("p", {
          cls: "translator_container-soundmark",
          text: symbolText
        }));
        const explains = FROM === "zh-CHS" && TO === "en" ? [...translation, basic.explains.toString()] : basic.explains;
        explains.forEach((exp) => {
          containerEl.appendChild(createEl("p", {
            cls: "translator_container-explain",
            text: exp
          }));
        });
        if (basic.wfs) {
          containerEl.appendChild(createEl("p", {
            cls: "translator_container-title",
            text: "Word forms"
          }));
          containerEl.appendChild(createEl("p", {
            cls: "translator_container-wfs",
            text: basic.wfs.map((item) => `${item.wf.name}: ${item.wf.value}`).join(", ")
          }));
        }
      } else {
        containerEl.appendChild(createEl("p", {
          cls: "translator_container-explain",
          text: translation.toString()
        }));
      }
      if (web) {
        containerEl.appendChild(createEl("p", {
          cls: "translator_container-title",
          text: "Other translations"
        }));
        web.forEach((item) => {
          containerEl.appendChild(createEl("p", {
            cls: "translator_container-other",
            text: `${item.key}: ${item.value.toString()}`
          }));
        });
      }
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Translator", cls: "translator_title" });
    let containerEl;
    new import_obsidian3.Setting(contentEl).setClass("translator_search").addText((text) => text.setValue(this.text).setPlaceholder("To be translated").onChange((value) => {
      this.text = value;
    })).addButton((btn) => btn.setIcon("search").setCta().onClick(() => {
      if (this.text) {
        this.translate(containerEl);
      } else {
        containerEl.empty();
      }
    })).addDropdown((dp) => dp.addOptions(options).setValue(this.settings.to).onChange((value) => {
      this.customTo = value;
    }));
    containerEl = contentEl.createDiv({ cls: "translator_container" });
    this.text && this.translate(containerEl);
  }
  onClose() {
    this.contentEl.empty();
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  to: "auto"
};
var TranslatorPlugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new TranslatorSettingTab(this.app, this));
      this.addRibbonIcon("book", "Translate", () => {
        this.app.commands.executeCommandById("obsidian-translator:translate");
      });
      this.addCommand({
        id: "translate",
        name: "translate",
        editorCallback: (editor, view) => {
          const { appId, secretKey } = this.settings;
          if (appId && secretKey) {
            const sel = editor.getSelection();
            new TranslatorModal(this.app, sel, this.settings).open();
          } else {
            noticeHandler("AppId or secretKey can not be empty!");
          }
        }
      });
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = __spreadValues(__spreadValues({}, DEFAULT_SETTINGS), yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
